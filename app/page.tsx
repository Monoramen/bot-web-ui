// src/app/dashboard/page.tsx
'use client';

import RecentFiringModal from '@/components/dashboard/RecentFiringModal';
import StatusBanner from '@/components/dashboard/StatusBanner';
import HeaderStatusCard from '@/components/dashboard/HeaderStatusCard';
import TemperatureChartCard from '@/components/dashboard/TemperatureChartCard';
import QuickActionsCard from '@/components/dashboard/QuickActionsCard';
import RecentFiringsCard from '@/components/dashboard/RecentFiringsCard';
import EventLogCard from '@/components/dashboard/EventLogCard';
import { useDashboard } from '@/hooks/useDashboard';
import { useState } from 'react';
import { FiringSession } from '@/types/session';

export default function DashboardPage() {
  const {
    deviceStatus,
    currentProgramId,
    loading,
    sessionId,
    isRunning,
    isCritical,
    statusMap,
    currentStage,
    recentFirings, 
    isLoadingRecent,
    eventLog,
    handleStartStop,
    handleSelectProgram,
    fetchCurrentProgram,
  } = useDashboard(16);

  const [selectedFiring, setSelectedFiring] = useState<FiringSession | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // –í DashboardPage.tsx
  const latestFiring = recentFirings.length > 0 ? recentFirings[0] : null;
  const startTime = latestFiring?.start_time ?? null; // ‚Üê –¥–æ–±–∞–≤–ª—è–µ–º

  // –û–±–Ω–æ–≤–ª—è–µ–º displaySessionId –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ sessionId –∏–ª–∏ recentFirings
  const displaySessionId = sessionId || (latestFiring?.id ? latestFiring.id.toString() : null);

  const openFiringDetails = (firing: FiringSession) => {
    setSelectedFiring(firing);
    setIsModalOpen(true);
  };
  if (deviceStatus === "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ") {
    return (
      <div className="min-h-screen bg-background p-4 md:p-6 flex items-center justify-center">
        <div className="text-lg text-red-500">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</div>
      </div>
    );
  }
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
  if (isLoadingRecent) {
    return (
      <div className="min-h-screen bg-background p-4 md:p-6 flex items-center justify-center">
        <div className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background p-4 md:p-6">
      <StatusBanner isCritical={isCritical} />

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* ‚úÖ –í–°–Å –ü–†–ê–í–ò–õ–¨–ù–û ‚Äî —Ç–µ–ø–µ—Ä—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º */}
        <HeaderStatusCard 
          deviceStatus={deviceStatus}
          isRunning={isRunning}
          isCritical={isCritical}
          statusMap={statusMap}
          currentStage={currentStage}
          program={latestFiring?.program}     // üëà –ö–õ–Æ–ß–ï–í–û–ô
          startTime={latestFiring?.start_time} // üëà –ö–õ–Æ–ß–ï–í–û–ô
        />

      <TemperatureChartCard 
        sessionId={displaySessionId}
        isRunning={isRunning}
        startTime={startTime} // üëà –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
      />

        <QuickActionsCard 
          loading={loading}
          currentProgramId={currentProgramId}
          handleSelectProgram={handleSelectProgram}
          handleStartStop={handleStartStop}
          isRunning={isRunning}
          isCritical={isCritical}
          onRefreshProgram={fetchCurrentProgram}
          refreshing={loading}
        />

        <RecentFiringsCard 
          
          openFiringDetails={openFiringDetails}
        />

        <EventLogCard eventLog={eventLog} />
      </div>

      <RecentFiringModal 
        firing={selectedFiring} 
        open={isModalOpen} 
        onOpenChange={setIsModalOpen} 
      />
    </div>
  );
}