// app/programs/page.tsx

'use client';

import { useState } from 'react';
import { usePrograms } from '@/hooks/usePrograms';
import ProgramList from '@/components/ProgramList';
import FiringProgramTable from '@/components/FiringProgramEditor';
import FiringProgramChart from '@/components/FiringProgramChart';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import DeviceParametersCharts from '@/components/DeviceParametersCharts';
import { toast } from 'react-hot-toast'; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

export default function ProgramsPage() {
  const { programs, loading, error, reload, setPrograms } = usePrograms();
  const [selectedProgramId, setSelectedProgramId] = useState<number | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [deviceChartsKey, setDeviceChartsKey] = useState(0);

const [selectedProgramVersion, setSelectedProgramVersion] = useState(0);
const handleSaveProgram = async (programData: any) => {
  if (!selectedProgramId && selectedProgramId !== 0) {
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    setIsSaving(true);
    try {
      const res = await fetch('http://localhost:9090/api/firing-programs/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(programData),
      });

      if (!res.ok) {
        const errorText = await res.text();
        console.error('Server error response:', errorText);
        toast.error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorText.substring(0, 100)}...`);
        return;
      }

      const newProgram = await res.json();

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Å–ø–∏—Å–æ–∫
      setPrograms((prev) => [...prev, newProgram]);

      // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
      setSelectedProgramId(newProgram.id);

      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≥—Ä–∞—Ñ–∏–∫–∞
      setSelectedProgramVersion(prev => prev + 1);

      toast.success('–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');

      await reload(); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    } catch (err) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã');
      console.error(err);
    } finally {
      setIsSaving(false);
    }
    return;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (–≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–¥)
  setIsSaving(true);
  try {
    const res = await fetch(`http://localhost:9090/api/firing-programs/${selectedProgramId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(programData),
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error('Server error response:', errorText);
      toast.error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${errorText.substring(0, 100)}...`);
      return;
    }

    const updated = await res.json();

    setPrograms((prev) =>
      prev.map((p) => (p.id === updated.id ? updated : p))
    );

    toast.success('–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');

    setSelectedProgramVersion(prev => prev + 1);

    await reload();
  } catch (err) {
    toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    console.error(err);
  } finally {
    setIsSaving(false);
  }
};

const reloadDeviceCharts = () => {
  console.log('üîÑ reloadDeviceCharts –≤—ã–∑–≤–∞–Ω! key =', deviceChartsKey + 1);
  setDeviceChartsKey(prev => prev + 1);
};
const handleDeleteProgram = async (programId: number) => {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
    return;
  }

  try {
    const res = await fetch(`http://localhost:9090/api/firing-programs/${programId}`, {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
    });

    if (!res.ok) {
      const errorText = await res.text();
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', errorText);
      toast.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${errorText.substring(0, 100)}...`);
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setPrograms(prev => prev.filter(p => p.id !== programId));

    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    if (selectedProgramId === programId) {
      setSelectedProgramId(null);
    }

    toast.success('–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–∞–ª–µ–Ω–∞');
    await reload(); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

  } catch (err) {
    toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    console.error(err);
  }
};
  return (
    <div className="p-2 md:p-0">


      <div className="flex flex-col lg:flex-row gap-6">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º */}
        <div className="flex-1 lg:w-1/3 flex flex-col gap-6">
          {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º...</p>}
          {error && <p className="text-red-500">{error}</p>}
          <ProgramList
            programs={programs}
            selectedProgramId={selectedProgramId}
            onSelect={setSelectedProgramId}
            onAdd={() => setSelectedProgramId(null)}
            onDelete={handleDeleteProgram} // ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º
          />
        </div>
{/* –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞: —Ä–µ–¥–∞–∫—Ç–æ—Ä */}
<div className="flex-1 lg:w-1/3 flex flex-col gap-6">

{selectedProgramId !== null ? (
  <FiringProgramTable
    programId={selectedProgramId}
    onSave={handleSaveProgram}
    onDelete={() => handleDeleteProgram(selectedProgramId)} 
    onCancel={() => setSelectedProgramId(null)}
    onDeploySuccess={reloadDeviceCharts}
  />
) : (
  <FiringProgramTable
    programId={null}
    onSave={handleSaveProgram}
    onCancel={() => setSelectedProgramId(null)}
  />
)}
</div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –≥—Ä–∞—Ñ–∏–∫ */}
        <div className="flex-1 lg:w-1/3 flex flex-col gap-6 ">
          <Card className="flex-1 flex flex-col ">
            <CardContent className="flex-1 p-0">
            {selectedProgramId ? (
              <FiringProgramChart 
                key={`chart-${selectedProgramId}-${selectedProgramVersion}`} 
                programId={selectedProgramId} 
                programData={programs.find(p => p.id === selectedProgramId) || null}
              />
            ) : (
              <div className="flex items-center justify-center h-full">
                <p className="text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</p>
              </div>
            )}
            </CardContent>
          </Card>
        </div>
      </div>

      <br />

      <div className="flex flex-col lg:flex-row gap-6">
        <Card className="flex-1 flex flex-col ">
          <DeviceParametersCharts key={deviceChartsKey} /> {/* ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º key */}
        </Card>
      </div>
    </div>
  );
}