// src/components/ProgramLoader.tsx
'use client';

import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import DeviceParameterChart from '@/components/program/DeviceParametersChart';
import { useDevicePrograms } from '@/hooks/useDevicePrograms';

interface ProgramLoaderProps {
  onDeploySuccess?: () => void; // ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–ø—Å –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
}

const ProgramLoader: React.FC<ProgramLoaderProps> = ({ onDeploySuccess }) => {
  const { programs, loading, errors, refetch } = useDevicePrograms();

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω onDeploySuccess ‚Äî –≤—ã–∑—ã–≤–∞–µ–º refetch –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  React.useEffect(() => {
    if (onDeploySuccess) {
      const handler = () => {
        console.log('üîÑ ProgramLoader: onDeploySuccess –≤—ã–∑–≤–∞–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
        refetch();
      };
      handler();
    }
  }, [onDeploySuccess, refetch]);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-48">
        <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...</p>
      </div>
    );
  }

  if (programs.length === 0) {
    return (
      <div className="col-span-full flex flex-col gap-4 justify-center items-center h-48 text-destructive">
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.</p>
        {Object.entries(errors).map(([id, msg]) => (
          <p key={id} className="text-xs">
            –ü—Ä–æ–≥—Ä–∞–º–º–∞ {id}: {msg}
          </p>
        ))}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-4">
      {programs.map((program) => (
        <DeviceParameterChart key={program.id} program={program} />
      ))}

      {[1, 2, 3]
        .filter((id) => !programs.some((p) => p.id === id) && errors[id])
        .map((id) => (
          <Card key={`error-${id}`} className="bg-destructive/10 border-destructive">
            <CardHeader>
              <CardTitle className="text-destructive">–ü—Ä–æ–≥—Ä–∞–º–º–∞ {id}</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-destructive">
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {errors[id]}
              </p>
            </CardContent>
          </Card>
        ))}
    </div>
  );
};

export default ProgramLoader;